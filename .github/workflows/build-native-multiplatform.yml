name: Build GraalVM Native Image Multi-Platform (Native Builders)

on:
  workflow_dispatch: # 允许手动触发工作流
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production

jobs:
  build-native-images:
    strategy:
      fail-fast: false # 即使一个平台构建失败，其他平台也会继续构建
      matrix:
        # 定义每个构建任务的独立配置
        include:
          # --- Windows x64 构建任务 ---
          - name: 'Windows x64 Build'
            runs-on: 'windows-latest' # 在 Windows 运行器上构建
            target-os: 'windows'
            target-arch: 'x64'
            artifact-name: 'windows-x64-native-image'
            executable-suffix: '.exe'

          # --- Linux x64 构建任务 ---
          - name: 'Linux x64 Build'
            runs-on: 'ubuntu-24.04' # 在 Linux x64 运行器上构建
            target-os: 'linux'
            target-arch: 'x64'
            artifact-name: 'linux-x64-native-image'
            executable-suffix: ''

          # --- Linux ARM64 构建任务 ---
          - name: 'Linux ARM64 Build'
            runs-on: 'ubuntu-24.04-arm' # 在 Linux ARM64 运行器上构建
            target-os: 'linux'
            target-arch: 'arm64'
            artifact-name: 'linux-arm64-native-image'
            executable-suffix: ''

    name: ${{ matrix.name }} # 作业名称将显示为 "Windows x64 Build", "Linux x64 Build" 等

    runs-on: ${{ matrix.runs-on }} # 根据矩阵动态选择运行器

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java and GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '24' # 你的 Java 版本
          distribution: 'graalvm'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          cache: 'gradle'
          native-image-job-reports: 'true'
          # target-os 和 target-arch 不再需要显式设置，
          # 因为 runs-on 已经决定了构建机的平台和架构，
          # GraalVM 会默认构建匹配运行器架构的原生镜像。
          # 如果你的项目依赖特定的工具链，setup-graalvm 也会帮助处理。

      - name: Verify GraalVM Native Image setup
        run: |
          native-image --version
        shell: bash # 确保在 Windows 上也使用 bash shell

      - name: Grant execute permission to gradlew
        run: chmod +x gradlew
        if: runner.os != 'Windows' # 仅在非 Windows 系统上执行

      - name: Build Project with Gradle
        run: |
          ./gradlew nativeBuild
        shell: bash # 在所有平台上使用 bash shell 运行 Gradle 命令

      - name: Verify Native Image Existence
        run: |
          executable_path="build/native/nativeCompile/demo2${{ matrix.executable-suffix }}"
          ls -l "$executable_path"
          file "$executable_path"
        shell: bash # 确保在 Windows 上也使用 bash shell

      - name: Upload Native Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: build/native/nativeCompile/demo2${{ matrix.executable-suffix }}